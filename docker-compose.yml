services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - project_default

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://34.64.208.105:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "kafka-logs:1:1,error-logs:1:1"
    depends_on:
      - zookeeper
    networks:
      - project_default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.keystore.type=PKCS12
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/www.projectkkk.pkcs12
      - xpack.security.transport.ssl.truststore.type=PKCS12
      - xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/www.projectkkk.pkcs12
      - xpack.security.transport.ssl.truststore.secure_password=${TRUSTSTORE_PASSWORD}
      - xpack.security.transport.ssl.verification_mode=full
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.type=PKCS12
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/www.projectkkk.pkcs12
      - xpack.security.http.ssl.truststore.type=PKCS12
      - xpack.security.http.ssl.truststore.path=/usr/share/elasticsearch/config/www.projectkkk.pkcs12    # 수정: 경로 변경
      - xpack.security.http.ssl.truststore.secure_password=${TRUSTSTORE_PASSWORD}
      - xpack.security.http.ssl.verification_mode=full  # SSL 검증활성화
      - ingest.geoip.downloader.enabled=true
      - KIBANA_SYSTEM_PASSWORD=Ccenter123456!
      - xpack.license.self_generated.type=basic
      - xpack.security.authc.token.enabled=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - "node.store.allow_mmap=false"
      - ELASTIC_USERNAME=elastic
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
      - TRUSTSTORE_PASSWORD=${TRUSTSTORE_PASSWORD}
    volumes:
      - ./www.projectkkk.pkcs12:/usr/share/elasticsearch/config/www.projectkkk.pkcs12  # SSL CA 인증서 경로 수정
      - /dev/urandom:/dev/random
      - es-data:/usr/share/elasticsearch/data
      - token-volume:/usr/share/kibana/config:rw
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      project_default:
        aliases:
          - elasticsearch.www.projectkkk.com
    command: >
      /bin/bash -c '
        echo "1. 환경 변수 검증 시작...";
        if [ -z "${ELASTIC_PASSWORD}" ] || [ -z "${KEYSTORE_PASSWORD}" ] || [ -z "${TRUSTSTORE_PASSWORD}" ]; then
            echo "필수 환경 변수가 설정되지 않았습니다. 실행 중단.";
            exit 1;
        fi;

        echo "2. 파일 권한 설정 시작...";
        chown -R 1000:1000 /usr/share/elasticsearch/config;
        chmod 750 /usr/share/elasticsearch/config;

        # 키스토어가 존재하지 않으면 생성
        if [ ! -f /usr/share/elasticsearch/config/www.projectkkk.pkcs12 ]; then
            echo "Elasticsearch 키스토어가 존재하지 않습니다. 키스토어를 생성합니다.";
            bin/elasticsearch-keystore create --force;
        fi;

        # 키스토어에 보안 설정 추가
        echo -n "${KEYSTORE_PASSWORD}" | bin/elasticsearch-keystore add -x xpack.security.transport.ssl.keystore.secure_password --stdin --force --silent;
        echo -n "${TRUSTSTORE_PASSWORD}" | bin/elasticsearch-keystore add -x xpack.security.transport.ssl.truststore.secure_password --stdin --force --silent;
        echo -n "${KEYSTORE_PASSWORD}" | bin/elasticsearch-keystore add -x xpack.security.http.ssl.keystore.secure_password --stdin --force --silent;
        echo -n "${TRUSTSTORE_PASSWORD}" | bin/elasticsearch-keystore add -x xpack.security.http.ssl.truststore.secure_password --stdin --force --silent;

        # analysis-nori 플러그인 설치
        if [ ! -d "/usr/share/elasticsearch/plugins/analysis-nori" ]; then
            bin/elasticsearch-plugin install --batch analysis-nori;
        fi;

        # Elasticsearch 시작
        /usr/local/bin/docker-entrypoint.sh eswrapper &
        echo "3. Elasticsearch 시작 대기 중...";
        for i in {1..20}; do
            if curl -s -k https://localhost:9200 > /dev/null; then
                echo "Elasticsearch가 실행 중입니다.";
                break;
            fi
            echo "Elasticsearch가 아직 준비되지 않았습니다. 재시도 중...";
            sleep 5;
        done;

        # Elasticsearch 준비 완료 확인
        if ! curl -s -k https://localhost:9200 > /dev/null; then
            echo "Elasticsearch가 준비되지 않았습니다. 실행 중단.";
            exit 1;
        fi;

        echo "4. 사용자 비밀번호 설정 중...";
        curl -k -X POST \
            -H "Content-Type: application/json" \
            -u "elastic:${ELASTIC_PASSWORD}" \
            -d "{\"password\":\"${ELASTIC_PASSWORD}\"}" \
            "https://localhost:9200/_security/user/elastic/_password"

        curl -k -X POST \
            -H "Content-Type: application/json" \
            -u "elastic:${ELASTIC_PASSWORD}" \
            -d "{\"password\":\"${KIBANA_SYSTEM_PASSWORD}\"}" \
            "https://localhost:9200/_security/user/kibana_system/_password"

        echo "5. 서비스 토큰 생성 중...";
        if [ ! -s /usr/share/elasticsearch/config/token.env ]; then
            bin/elasticsearch-service-tokens create elastic/kibana kibana-token | tail -n1 | tr -d "\n" > /usr/share/elasticsearch/config/token.env;

            # Kibana로 토큰 복사 및 권한 설정
            cp /usr/share/elasticsearch/config/token.env /usr/share/kibana/config/token.env;
            chown 1000:1000 /usr/share/kibana/config/token.env;
            chmod 600 /usr/share/kibana/config/token.env;

            if [ -s /usr/share/elasticsearch/config/token.env ]; then
                echo "서비스 토큰이 성공적으로 생성되었습니다.";
            else
                echo "토큰 생성에 실패했습니다. Elasticsearch 로그를 확인하세요.";
            fi;
        else
            echo "기존 서비스 토큰이 유효합니다. 새로 생성하지 않습니다.";
        fi;

        wait
      '
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "-u", "elastic:${ELASTIC_PASSWORD}", "https://localhost:9200/_cluster/health"]
      interval: 60s
      timeout: 120s
      retries: 10
      start_period: 300s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.4
    container_name: logstash
    user: root
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./www.projectkkk.pkcs12:/usr/share/elasticsearch/config/www.projectkkk.pkcs12
      - ./www.projectkkk.pkcs12:/usr/share/logstash/config/www.projectkkk.pkcs12
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      ELASTICSEARCH_HOSTS: "https://elasticsearch.www.projectkkk.com:9200"
      ELASTICSEARCH_USER: "elastic"
      ELASTICSEARCH_PASSWORD: "${ELASTICSEARCH_PASSWORD}"
      LOGSTASH_KEYSTORE_PATH: "/usr/share/logstash/config/www.projectkkk.pkcs12"
      LOGSTASH_KEYSTORE_PASSWORD: "${LOGSTASH_KEYSTORE_PASSWORD}"
      LOGSTASH_KEYSTORE_TYPE: "pkcs12"
      CA_PASSWORD: "${CA_PASSWORD}"
      LS_JAVA_OPTS: "-Djavax.net.ssl.trustStore=/usr/share/logstash/config/www.projectkkk.pkcs12 -Djavax.net.ssl.trustStorePassword=Ccenter123456! -Djavax.net.ssl.trustStoreType=PKCS12"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "-k", "-u", "elastic:${ELASTIC_PASSWORD}", "https://elasticsearch.www.projectkkk.com:9200/_cluster/health" ]
      interval: 30s  # 30초마다 재시도
      timeout: 60s   # 명령 타임아웃을 60초로 설정
      retries: 20    # 재시도 횟수 증가
      start_period: 120s  # 초기 대기 시간을 120초로 설정
    networks:
      project_default:
        aliases:
          - logstash.www.projectkkk.com

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.4
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "https://elasticsearch.www.projectkkk.com:9200"
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      ELASTICSEARCH_SSL_VERIFICATIONMODE: full
      ELASTICSEARCH_SSL_KEYSTORE_PATH: /usr/share/kibana/config/www.projectkkk.pkcs12
      ELASTICSEARCH_SSL_KEYSTORE_PASSWORD: ${KIBANA_KEYSTORE_PASSWORD}
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEYSTORE_PATH: /usr/share/kibana/config/www.projectkkk.pkcs12
      SERVER_SSL_KEYSTORE_PASSWORD: ${KIBANA_KEYSTORE_PASSWORD}
      KIBANA_KEYSTORE_PASSWORD: ${KIBANA_KEYSTORE_PASSWORD}
      SERVER_PUBLICBASEURL: "https://www.projectkkk.com:5601"
      XPACK_SECURITY_ENCRYPTIONKEY: "something_at_least_32_characters"
      XPACK_REPORTING_ENCRYPTIONKEY: "something_at_least_32_characters"
      XPACK_ENCRYPTEDUSAVEDOBJECTS_ENCRYPTIONKEY: "something_at_least_32_characters"
      XPACK_SECURITY_SAMESITECOOKIES: None
      XPACK_SECURITY_SECURECOOKIES: "true"
      LOGGING_LEVEL: debug
      SERVER_CORS_ENABLED: "true"
      SERVER_CORS_ALLOW_CREDENTIALS: "true"
      SERVER_CORS_ALLOW_ORIGIN: "https://www.projectkkk.com,https://projectkkk.vercel.app,https://www.projectkkk.com:5601"
      NODE_OPTIONS: "--openssl-legacy-provider"
      CSP_RULES: >
        default-src 'self';
        script-src 'self' 'sha256-SbBSU7MfZFnVMq4PuE/jbBz7pPIfXUTYDrdHl7Ckchc=' https://*.projectkkk.com https://projectkkk.vercel.app https://www.projectkkk.com;
        style-src 'self' 'sha256-7Qf8U/WgiKRW4EKHHq52AbsaG2K/o6jKbzN5oiiJSXM=' https://*.projectkkk.com https://projectkkk.vercel.app;
        img-src 'self' data: blob:;
        connect-src 'self' https://*.projectkkk.com wss://*.projectkkk.com https://projectkkk.vercel.app;
        frame-src 'self' https://*.projectkkk.com https://projectkkk.vercel.app;
        frame-ancestors 'self' https://*.projectkkk.com https://projectkkk.vercel.app;
        font-src 'self' data:;
        base-uri 'self';
        worker-src 'self' blob:;
        object-src 'none';
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: >
      /bin/bash -c "
                    while [ ! -f /usr/share/kibana/config/token.env ]; do
                      sleep 1
                    done
                    /usr/local/bin/kibana-docker --allow-root &
                    wait"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s https://localhost:5601/api/status | grep -q 'Looking good'" ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
      - ./www.projectkkk.pkcs12:/usr/share/kibana/config/www.projectkkk.pkcs12
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
      - token-volume:/usr/share/kibana/config:rw
      - ./www.projectkkk.com.pem:/usr/share/elasticsearch/config/www.projectkkk.com.pem
      - ./www.projectkkk.com.pem:/usr/share/kibana/config/www.projectkkk.com.pem
    networks:
      project_default:
        aliases:
          - kibana.www.projectkkk.com

  springboot:
    build:
      context: .
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
    container_name: springboot
    ports:
      - "443:443"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://zigzag-database.cnkq8ww86ffm.ap-northeast-2.rds.amazonaws.com:3306/zigzagDB
      SPRING_DATASOURCE_USERNAME: Kang
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_ELASTICSEARCH_REST_URIS: "https://elasticsearch.www.projectkkk.com:9200"
      SPRING_ELASTICSEARCH_REST_USERNAME: elastic
      SPRING_ELASTICSEARCH_REST_PASSWORD: ${ELASTIC_PASSWORD}
      SPRING_ELASTICSEARCH_REST_SSL_ENABLED: "true"
      SPRING_ELASTICSEARCH_REST_SSL_VERIFICATION_MODE: full
      SPRING_ELASTICSEARCH_REST_SSL_TRUST_STORE: /usr/share/elasticsearch/config/www.projectkkk.pkcs12
      SPRING_ELASTICSEARCH_REST_SSL_TRUST_STORE_PASSWORD: ${CA_PASSWORD}
      SPRING_ELASTICSEARCH_REST_SSL_TRUST_STORE_TYPE: PKCS12
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE: /usr/share/springboot/config/www.projectkkk.pkcs12
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE_PASSWORD: ${SPRINGBOOT_PASSWORD}
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE_TYPE: PKCS12
      SERVER_PORT: "443"
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY_STORE: "/app/www.projectkkk.pkcs12"
      SERVER_SSL_KEY_STORE_PASSWORD: ${SPRINGBOOT_PASSWORD}
      SERVER_SSL_KEY_STORE_TYPE: "PKCS12"
      SERVER_HSTS_ENABLED: "false"
      SERVER_HSTS_INCLUDE_SUBDDOMAINS: "false"
      SERVER_HSTS_PRELOAD: "false"
      KAKAO_API_KEY: "5ef47e46986e714e47d918266a647a01"
      GOOGLE_APPLICATION_CREDENTIALS: "/usr/share/springboot/superb-analog-439512-g8-e7979f6854cd.json"
      JAVA_OPTS: >
        -Dserver.port=443
        -Dserver.ssl.key-store=/app/www.projectkkk.pkcs12
        -Dserver.ssl.key-store-password=${SPRINGBOOT_PASSWORD}
        -Dserver.ssl.key-store-type=PKCS12
        -Djavax.net.ssl.trustStore=/usr/local/openjdk-17/lib/security/cacerts
        -Djavax.net.ssl.trustStorePassword=changeit
        -Djavax.net.ssl.trustStoreType=JKS
        -DGOOGLE_APPLICATION_CREDENTIALS=/usr/share/springboot/superb-analog-439512-g8-e7979f6854cd.json
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      logstash:
        condition: service_healthy
    volumes:
      - ./uploads:/uploads
      - ./www.projectkkk.pkcs12:/usr/share/elasticsearch/config/www.projectkkk.pkcs12:ro
      - ./www.projectkkk.pkcs12:/usr/share/springboot/config/www.projectkkk.pkcs12:ro
      - ./www.projectkkk.pkcs12:/app/www.projectkkk.pkcs12
      - ./src/main/resources/superb-analog-439512-g8-e7979f6854cd.json:/usr/share/springboot/superb-analog-439512-g8-e7979f6854cd.json
    networks:
      project_default:
        aliases:
          - www.projectkkk.com
volumes:
  elasticsearch-data:
  kibana-data:
  token-volume:
    driver: local
  es-data:

networks:
  project_default:
    external: true